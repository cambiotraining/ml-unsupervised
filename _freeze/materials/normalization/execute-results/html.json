{
  "hash": "f62c7531a2e90f02a47b184fc3719184",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Normalizing your data\"\nformat: html\n---\n\n# Introduction\n\nThis Quarto notebook demonstrates basic unsupervised machine learning concepts using Python.\n\n## Learning Objectives\n\n- Refresher on Python\n- Understand the difference between supervised and unsupervised learning.\n- Apply PCA and clustering to example data.\n- Visualize results with matplotlib.\n\n## Refresher on Python\n\n<!--\nIf SSL error on Mac OS X,\nthen \n\ntry in the Terminal\n\nopen \"/Applications/Python 3.10/Install Certificates.command\"\n-->\n\n::: {#d0691a2a .cell execution_count=1}\n``` {.python .cell-code}\n# ============================================================================\n# 1. IMPORTING PACKAGES\n# ============================================================================\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ============================================================================\n# 2. READING DATA WITH PANDAS FROM GITHUB\n# ============================================================================\n\nprint(\"\\n Loading data from GitHub...\")\n\n# GitHub URL for the diabetes data\n# Convert from GitHub web URL to raw data URL\ngithub_url = \"https://raw.githubusercontent.com/cambiotraining/ml-unsupervised/main/course_files/data/diabetes_sample_data.csv\"\n\n# Read CSV file directly from GitHub\ndiabetes_data = pd.read_csv(github_url)\n    \n# Display basic information about the data\nprint(\"\\nData shape:\", diabetes_data.shape)\nprint(\"\\nFirst 5 rows:\")\nprint(diabetes_data.head())\n        \nprint(\"\\nBasic statistics:\")\nprint(diabetes_data.describe())\n\n# ============================================================================\n# 3. PLOTTING WITH MATPLOTLIB\n# ============================================================================\n\n# Plot 1: Histogram of Age\nplt.figure(figsize=(10, 6))\nplt.hist(diabetes_data['age'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')\nplt.title('Distribution of Age', fontsize=14, fontweight='bold')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.3)\n#plt.savefig('age_distribution.png', dpi=300, bbox_inches='tight')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Loading data from GitHub...\n\nData shape: (100, 6)\n\nFirst 5 rows:\n   patient_id   age  glucose   bmi  blood_pressure  diabetes\n0           1  62.5     97.5  29.8            71.7         0\n1           2  52.9    127.4  30.8            74.4         0\n2           3  64.7    129.7  33.4            87.5         0\n3           4  77.8    115.9  33.3            86.1         1\n4           5  51.5    135.2  21.1            79.8         1\n\nBasic statistics:\n       patient_id         age     glucose         bmi  blood_pressure  \\\ncount  100.000000  100.000000  100.000000  100.000000      100.000000   \nmean    50.500000   53.444000  140.670000   28.322000       81.066000   \nstd     29.011492   13.625024   28.611669    5.425223        8.842531   \nmin      1.000000   15.700000   82.400000   11.800000       58.800000   \n25%     25.750000   46.000000  115.800000   24.700000       74.350000   \n50%     50.500000   53.100000  142.550000   28.500000       80.500000   \n75%     75.250000   61.075000  156.175000   31.500000       86.825000   \nmax    100.000000   82.800000  221.600000   47.300000      101.900000   \n\n         diabetes  \ncount  100.000000  \nmean     0.250000  \nstd      0.435194  \nmin      0.000000  \n25%      0.000000  \n50%      0.000000  \n75%      0.250000  \nmax      1.000000  \n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](normalization_files/figure-html/cell-2-output-2.png){width=808 height=526}\n:::\n:::\n\n\n## Setup\n\n::: {#e469de40 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\n```\n:::\n\n\n## Example Data\n\n::: {#a14f0fde .cell execution_count=3}\n``` {.python .cell-code}\n# Generate synthetic data\nnp.random.seed(42)\nX = np.vstack([\n    np.random.normal(loc=[0, 0], scale=1, size=(50, 2)),\n    np.random.normal(loc=[5, 5], scale=1, size=(50, 2))\n])\nplt.scatter(X[:, 0], X[:, 1])\nplt.title(\"Synthetic Data\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](normalization_files/figure-html/cell-4-output-1.png){width=569 height=431}\n:::\n:::\n\n\n## PCA Example\n\n::: {#a3a60ce3 .cell execution_count=4}\n``` {.python .cell-code}\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X)\nplt.scatter(X_pca[:, 0], X_pca[:, 1])\nplt.title(\"PCA Projection\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](normalization_files/figure-html/cell-5-output-1.png){width=569 height=431}\n:::\n:::\n\n\n## Clustering Example\n\n::: {#1586620f .cell execution_count=5}\n``` {.python .cell-code}\nkmeans = KMeans(n_clusters=2, random_state=42)\nlabels = kmeans.fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=labels)\nplt.title(\"KMeans Clustering\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](normalization_files/figure-html/cell-6-output-1.png){width=569 height=431}\n:::\n:::\n\n\n## Conclusion\n\n- PCA reduces dimensionality for visualization.\n- KMeans finds clusters in unlabeled data.\n\n---\n\n*Edit this template to add your own data\n\n",
    "supporting": [
      "normalization_files"
    ],
    "filters": [],
    "includes": {}
  }
}
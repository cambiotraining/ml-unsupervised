{
  "hash": "aec1b8f3b21bf9c75d830740ea9c8318",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Refresher on Python\n---\n\n::: {.callout-tip}\n#### Learning Objectives\n\n- Refresher on Python\n:::\n<!-- end callout -->\n\n\n## Refresher on Python\n\n<!--\nIf SSL error on Mac OS X,\nthen \n\ntry in the Terminal\n\nopen \"/Applications/Python 3.10/Install Certificates.command\"\n-->\n\n* [Python Installation](https://cambiotraining.github.io/ml-unsupervised/setup.html)\n\n* Install Python packages\n\n::: {#a51eadb8 .cell execution_count=1}\n``` {.python .cell-code}\n!pip install pandas numpy scikit-learn seaborn matplotlib scanpy pca\n```\n:::\n\n\n* Loading data and data visualization\n\n_Note_: Here is an alternative way to read a file\n\n```python\nimport pandas as pd\nimport os\n# find out which directory is your current working directory\nos.getcwd()\n# now change directory to where your files are (my files are in the directory shown below)\nos.chdir(\"/Users/soumyabanerjee/soumya_cam_mac/teaching/ml-unsupervised/\") \n# now read the file\ndiabates_data = pd.read_csv(\"course_files/data/diabetes_sample_data.csv\")\n```\n\n::: {#4fee41a2 .cell execution_count=2}\n``` {.python .cell-code}\n# 1. IMPORTING PACKAGES\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# 2. READING DATA WITH PANDAS FROM GITHUB\n\n# GitHub URL for the diabetes data\n# Convert from GitHub web URL to raw data URL\ngithub_url = \"https://raw.githubusercontent.com/cambiotraining/ml-unsupervised/main/course_files/data/diabetes_sample_data.csv\"\n\n# Read CSV file directly from GitHub\ndiabetes_data = pd.read_csv(github_url)\n\n# Display basic information about the data\nprint(\"\\nData shape:\", diabetes_data.shape)\nprint(\"\\nFirst 5 rows:\")\nprint(diabetes_data.head())\n        \nprint(\"\\nBasic statistics:\")\nprint(diabetes_data.describe())\n\n# 3. PLOTTING WITH MATPLOTLIB\n\n# Plot 1: Histogram of Age\nplt.figure()\nplt.hist(diabetes_data['age'], bins=20, alpha=0.7)\nplt.title('Distribution of Age', fontsize=14, fontweight='bold')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.grid(True, alpha=0.3)\nplt.savefig('age_distribution.png', dpi=300)\nplt.show()\n\n# 4. NUMPY\na = np.array([17, 13, 78, 901])\nprint(\"This is a numpy array:\")\nprint(a)\nprint(\"Here is the mean/average:\")\nprint( np.mean(a) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nData shape: (100, 6)\n\nFirst 5 rows:\n   patient_id   age  glucose   bmi  blood_pressure  diabetes\n0           1  62.5     97.5  29.8            71.7         0\n1           2  52.9    127.4  30.8            74.4         0\n2           3  64.7    129.7  33.4            87.5         0\n3           4  77.8    115.9  33.3            86.1         1\n4           5  51.5    135.2  21.1            79.8         1\n\nBasic statistics:\n       patient_id         age     glucose         bmi  blood_pressure  \\\ncount  100.000000  100.000000  100.000000  100.000000      100.000000   \nmean    50.500000   53.444000  140.670000   28.322000       81.066000   \nstd     29.011492   13.625024   28.611669    5.425223        8.842531   \nmin      1.000000   15.700000   82.400000   11.800000       58.800000   \n25%     25.750000   46.000000  115.800000   24.700000       74.350000   \n50%     50.500000   53.100000  142.550000   28.500000       80.500000   \n75%     75.250000   61.075000  156.175000   31.500000       86.825000   \nmax    100.000000   82.800000  221.600000   47.300000      101.900000   \n\n         diabetes  \ncount  100.000000  \nmean     0.250000  \nstd      0.435194  \nmin      0.000000  \n25%      0.000000  \n50%      0.000000  \n75%      0.250000  \nmax      1.000000  \n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](python_refresher_files/figure-html/cell-3-output-2.png){width=585 height=452}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a numpy array:\n[ 17  13  78 901]\nHere is the mean/average:\n252.25\n```\n:::\n:::\n\n\n* You can also go through this [Introduction to Visualization in Python course](https://kavihshah.github.io/Intro-to-Python/materials/13-data-visualisation-with-matplotlib-and-seaborn.html)\n\n\n\n\n\n\n### Optional exercise on Python {#sec-pythonrefresher}\n\n::::: {#ex-title .callout-exercise}\n\n#### exercise_python\n\n{{< level 1 >}}\n\nLoad the dataset from this GitHub URL:  \n\nhttps://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv  \n\nSave it to a variable called `crime_data` and display:\n\n- The shape of the data  \n- The first 3 rows  \n- Column names using `.columns`  \n\n\n \n:::: {.callout-answer collapse=\"true\"}\n\n#### Simple data munging and visualization\n\n\n::: {.panel-tabset group=\"language\"}\n\n\n## Python\n\n::: {#80041acc .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Load the dataset\nurl = \"https://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv\"\n\ncrime_data = pd.read_csv(url)\n\n# Display the shape of the data\nprint(\"Shape of the dataset:\", crime_data.shape)\n\n# Display the first 3 rows\nprint(\"\\nFirst 3 rows:\")\nprint(crime_data.head(3))\n\n# Display column names\nprint(\"\\nColumn names:\")\nprint(crime_data.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShape of the dataset: (48, 5)\n\nFirst 3 rows:\n     State  Murder  Assault  UrbanPop  Rape\n0  Alabama    13.2      236        58  21.2\n1   Alaska    10.0      263        48  44.5\n2  Arizona     8.1      294        80  31.0\n\nColumn names:\nIndex(['State', 'Murder', 'Assault', 'UrbanPop', 'Rape'], dtype='object')\n```\n:::\n:::\n\n\n## R\n\n\n:::\n\n::::\n\n:::::\n\n\n\n\n### Optional exercise on Python {#sec-pythonrefresher2}\n\n::::: {#ex-title2 .callout-exercise}\n\n#### exercise_python_visualization\n\n{{< level 1 >}}\n\nLoad the dataset from this GitHub URL:  \n\nhttps://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv  \n\n\nHistogram: Show the distribution of murders\n\n- Use `plt.hist()` with the `Murder` column  \n- Use 15 bins  \n- Add title: **\"Distribution of Murder\"**  \n- Add axis labels and grid  \n\nRemember to use `plt.show()` after each plot!  \n\n\n \n:::: {.callout-answer collapse=\"true\"}\n\n#### Simple data visualization\n\n\n::: {.panel-tabset group=\"language\"}\n\n\n## Python\n\n::: {#4ba53373 .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the dataset\nurl = \"https://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv\"\ncrime_data = pd.read_csv(url)\n\n# Draw histogram\nplt.figure()\nplt.hist(crime_data[\"Murder\"], bins=15)\nplt.grid(True)\nplt.xlabel(\"Murder\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of Murder\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](python_refresher_files/figure-html/cell-5-output-1.png){width=576 height=449}\n:::\n:::\n\n\n## R\n\n\n:::\n\n::::\n\n:::::\n\n\n\n\n\n\n### Optional exercise on Python {#sec-pythonrefresher4}\n\n::::: {#ex-title4 .callout-exercise}\n\n#### exercise_python_numpy\n\n{{< level 1 >}}\n\nLoad the dataset from this GitHub URL:  \n\nhttps://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv  \n\n\nCalculate the mean/average number of murders in USA.\n\n \n:::: {.callout-answer collapse=\"true\"}\n\n#### Simple numpy usage\n\n\n::: {.panel-tabset group=\"language\"}\n\n\n## Python\n\n::: {#75ed2a62 .cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# Load the dataset\nurl = \"https://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv\"\ncrime_data = pd.read_csv(url)\n\n# Draw histogram\nnumpy_array_murders = crime_data[\"Murder\"].to_numpy()\n\nprint( np.mean(numpy_array_murders) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7.916666666666667\n```\n:::\n:::\n\n\n## R\n\n\n:::\n\n::::\n\n:::::\n\n\n\n\n\n### Optional exercise on Python {#sec-pythonrefresher3}\n\n::::: {#ex-title3 .callout-exercise}\n\n#### exercise_python_data_munging_advanced\n\n{{< level 2 >}}\n\nLoad the dataset from this GitHub URL:  \n\nhttps://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv  \n\n\nFind the state that has the highest number of murders.\n\n \n:::: {.callout-answer collapse=\"true\"}\n\n#### Data munging (advanced)\n\n\n::: {.panel-tabset group=\"language\"}\n\n\n## Python\n\n::: {#fb3029ac .cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the dataset\nurl = \"https://raw.githubusercontent.com/cambiotraining/ml-unsupervised/refs/heads/main/course_files/data/USArrests.csv\"\ncrime_data = pd.read_csv(url)\n\n# use groupby\nprint(crime_data.groupby(\"State\")[\"Murder\"].mean().sort_values(ascending = False).head())\n\n# Alternative use idxmax() and loc()\n# arrests_data['Murder'].idxmax() → finds the index (row number) of the maximum value in the Murder column.\n# .loc[ ... , ['State', 'Murder']] → uses .loc[] to look up the row with the maximum murder rate and only show the State name and Murder value.\nprint(crime_data.loc [crime_data[\"Murder\"].idxmax(), [\"State\",\"Murder\"] ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nState\nGeorgia           17.4\nMississippi       16.1\nFlorida           15.4\nLouisiana         15.4\nSouth Carolina    14.4\nName: Murder, dtype: float64\nState     Georgia\nMurder       17.4\nName: 9, dtype: object\n```\n:::\n:::\n\n\n## R\n\n\n:::\n\n::::\n\n:::::\n\n\n\n\n\n\n\n### Optional exercise on Python {#sec-pythonrefresher5}\n\n::::: {#ex-title5 .callout-exercise}\n\n#### exercise_python_numpy\n\n{{< level 2 >}}\n\nFill in the blanks in the code below.\n\n```python\nimport numpy as np\n\n# 1) Reproducibility\nnp.random.seed(7)\n\n# 2) Make a 5x4 array of random numbers in [0, 1)\nX = np.random.rand(5, 4)\n\n# 3) Compute:\n# - mean of each column\n# - mean of each row\n# - overall mean\ncol_means = ...\nrow_means = ...\noverall_mean = ...\n\nprint(\"X:\\n\", X)\nprint(\"Column means:\", col_means)\nprint(\"Row means:\", row_means)\nprint(\"Overall mean:\", overall_mean)\n\n# 4) Bonus: random integers from 0..99 (size=12). Compare mean to 49.5\nints = np.random.randint(0, 100, size=12)\nints_mean = ...\nprint(\"Random integers:\", ints)\nprint(\"Integers mean:\", ints_mean)\n```\n \n:::: {.callout-answer collapse=\"true\"}\n\n#### Numpy (advanced)\n\n\n::: {.panel-tabset group=\"language\"}\n\n\n## Python\n\n::: {#8d290bd5 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\n\n# 1) Reproducibility\nnp.random.seed(7)\n\n# 2) Make a 5x4 array of random numbers in [0, 1)\nX = np.random.rand(5, 4)\n\n# 3) Compute:\n# - mean of each column\n# - mean of each row\n# - overall mean\ncol_means = X.mean(axis=0)\nrow_means = X.mean(axis=1)\noverall_mean = X.mean()\n\nprint(\"X:\\n\", X)\nprint(\"Column means:\", col_means)\nprint(\"Row means:\", row_means)\nprint(\"Overall mean:\", overall_mean)\n\n# 4) Bonus: random integers from 0..99 (size=12). Compare mean to 49.5\nints = np.random.randint(0, 100, size=12)\nints_mean = ints.mean()\nprint(\"Random integers:\", ints)\nprint(\"Integers mean:\", ints_mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nX:\n [[0.07630829 0.77991879 0.43840923 0.72346518]\n [0.97798951 0.53849587 0.50112046 0.07205113]\n [0.26843898 0.4998825  0.67923    0.80373904]\n [0.38094113 0.06593635 0.2881456  0.90959353]\n [0.21338535 0.45212396 0.93120602 0.02489923]]\nColumn means: [0.38341265 0.46727149 0.56762226 0.50674962]\nRow means: [0.50452537 0.52241424 0.56282263 0.41115415 0.40540364]\nOverall mean: 0.48126400765922045\nRandom integers: [61 64 34 56 73 78 38  4  9 87 99 67]\nIntegers mean: 55.833333333333336\n```\n:::\n:::\n\n\n## R\n\n\n:::\n\n::::\n\n:::::\n\n\n\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- A quick refresher on Python\n- Simple exercises (optional)\n:::\n<!-- end callout -->\n\n\n## Resources\n\n[1] [Course on data analysis using Python](https://cambiotraining.github.io/data-analysis-in-r-and-python/)\n\n[2] [Introduction to Visualization in Python course](https://kavihshah.github.io/Intro-to-Python/materials/13-data-visualisation-with-matplotlib-and-seaborn.html)\n\n[3] [Coursera courses on Python](https://www.coursera.org/specializations/python)\n\n",
    "supporting": [
      "python_refresher_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "e190bfec0812199a51b2cad3637d2ab5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: When PCA or tSNE might not work\n---\n\n::: {.callout-tip}\n#### Learning Objectives\n\n- Understand real-world scenarios where unsupervised learning is applied\n- Identify situations where PCA and other dimensionality reduction techniques may not be effective\n\n:::\n\n\n\n## When PCA may *not* work\n\n### **Non-linear data**\n\n\n- **Non-linearity**: Data that lies on curved surfaces or when data has non-linear relationships.\n- **Single-cell data**: Biological data where cell types form non-linear clusters in high-dimensional space\n\n### **Categorical Features**\n- PCA may work poorly with categorical data unless properly encoded\n- One-hot encoding categorical features can create sparse, high-dimensional data where PCA may not capture meaningful structure\n\n<!-- TODO: CCA comment by Hugo -->\n\n<!--\n### 3. **When Variance Direction ≠ Structure Direction**\n- PCA maximizes variance along principal components, but this doesn't always align with the true underlying structure\n- The lesson shows how PCA on XOR data captures only ~15% variance per component, failing to reveal the true four-cluster structure\n-->\n\n## Alternatives\n\n### **t-SNE** (t-Distributed Stochastic Neighbor Embedding)\n- **Best for**: Non-linear dimensionality reduction and visualization\n- **Key parameter**: Perplexity (try values 5-50)\n- **Use case**: Single-cell data, biological expression data, any non-linear clustering\n\n\n::: {.callout-tip}\n**NOTE (IMPORTANT CONCEPT)**: Sometimes tSNE may not work as well! It is hard to predict which unsupervised machine learning technique will work best.\n\nYou just need to try a bunch of different techniques.\n:::\n<!-- end callout -->\n\n\n<!--\n### **Autoencoders**\n- **Best for**: Complex non-linear relationships in deep learning contexts\n- **Use case**: When you need to learn complex representations\n-->\n\n### **Hierarchical Clustering + Heatmaps**\n- **Best for**: Categorical data and understanding relationships between samples\n- **Use case**: When you want to see how samples group together based on multiple features\n\n\n\n### Demonstrating how PCA or tSNE may not work well\n\n* Generate synthetic biological expression data: matrix of 200 samples × 10 genes, where Gene_1 and Gene_2 follow a clustering (four corner clusters) and the remaining genes are just Gaussian noise. You can see from the scatter of Gene_1 vs Gene_2 that the true structure is non-linear and not aligned with any single variance direction: PCA (or tSNE) may fail to unfold these clusters into separate principal components.\n\n::: {#4bb810e0 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-2-output-1.png){width=600 height=449}\n:::\n:::\n\n\n* Perform PCA on this data\n\n::: {#9aaf3029 .cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n\n# Apply PCA\npca = PCA()\npcs = pca.fit_transform(df) # where df is a dataframe with your data\n\n\n# Scatter plot of the first two principal components\nplt.figure()\nplt.scatter(pcs[:, 0], pcs[:, 1])\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.title('PCA on Synthetic Biological Dataset')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-3-output-1.png){width=587 height=449}\n:::\n:::\n\n\n* Let us try tSNE on this data\n\n::: {#ad301982 .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n\ntsne = TSNE()\ntsne_results = tsne.fit_transform(df)\n\n# plot\nplt.figure()\nplt.scatter(tsne_results[:,0], tsne_results[:,1])\nplt.xlabel('t-SNE component 1')\nplt.ylabel('t-SNE component 2')\nplt.title('t-SNE on Synthetic Biological Dataset')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-4-output-1.png){width=600 height=449}\n:::\n:::\n\n\n* What if we try different values of *perplexity*?\n\n::: {#e670077a .cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-5-output-1.png){width=1910 height=470}\n:::\n:::\n\n\n#### What if data has categorical features?\n\n* PCA may not work if you have categorical features\n\nFor example, if you have data that looks like this ....\n\n::: {#d024861e .cell execution_count=5}\n\n::: {.cell-output .cell-output-stdout}\n```\n  species tissue condition\n0   human  liver  diseased\n1   mouse  brain  diseased\n2   human  liver  diseased\n3   human  brain  diseased\n4   mouse  brain   healthy\n```\n:::\n:::\n\n\n<!-- TODO: explain one hot encoding, also talkabout CCA and put in bonus material Issue #17 -->\n\n::: {#c0749641 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-7-output-1.png){width=566 height=470}\n:::\n:::\n\n\n* We can split by disease/healthy, or other features.\n\n::: {#1dd4b23a .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-8-output-1.png){width=950 height=758}\n:::\n:::\n\n\n<!--* TODO: XX tSNE and color by tissue type-->\n\n\n* Hierarchical clustering\n\n_Recall_:\n\n**Leaves**: Each leaf at the bottom of the dendrogram represents one sample from your dataset.\n\n**Branches**: The branches connect the samples and groups of samples. The height of the branch represents the distance (dissimilarity) between the clusters being merged.\n\n**Height of Merges**: Taller branches indicate that the clusters being merged are more dissimilar, while shorter branches indicate more similar clusters.\n\n**Clusters**: By drawing a horizontal line across the dendrogram at a certain distance, you can define clusters. All samples below that line that are connected by branches form a cluster.\n\n* In the context of your one-hot encoded categorical data (species, tissue, condition), the dendrogram shows how samples are grouped based on their combinations of these categorical features.\n\n* Samples with the same or very similar combinations of categories will be closer together in the dendrogram and merge at lower distances.\n\n* The structure of the dendrogram reflects the relationships and similarities between the different combinations of species, tissue, and condition present in your synthetic dataset.\n\n::: {#39d5671a .cell execution_count=8}\n``` {.python .cell-code}\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# Assume 'encoded_data' exists from the previous one-hot encoding step\nlinked = linkage(y = encoded_data,\n    method = 'ward',\n    metric = 'euclidean',\n    optimal_ordering=True\n    )\n\n# plot dendrogram\nplt.figure()\ndendrogram(linked, \n            orientation='top',\n            distance_sort='descending',\n            show_leaf_counts=True)\nplt.title('Hierarchical Clustering Dendrogram on One-Hot Encoded Categorical Data')\nplt.xlabel('Sample Index')\nplt.ylabel('Distance')\nplt.show()\n\n# or use sns.clustermap()\nsns.clustermap(data=encoded_data,\nmethod = \"ward\",\nmetric = \"euclidean\",\nrow_cluster = True,\ncol_cluster = True,\ncmap = \"vlag\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-9-output-1.png){width=623 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-9-output-2.png){width=950 height=951}\n:::\n:::\n\n\n* Heatmaps\n\nHeatmaps are a great way to visualize data and clustering\n\n::: {#197be851 .cell execution_count=9}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assume 'encoded_df' exists from the previous one-hot encoding step\n\nplt.figure()\nsns.heatmap(encoded_df.T, cmap='viridis', cbar_kws={'label': 'Encoded Value (0 or 1)'}) # Transpose for features on y-axis\n\nplt.title('Heatmap of One-Hot Encoded Categorical Data')\nplt.xlabel('Sample Index')\nplt.ylabel('Encoded Feature')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](pca_tsne_notwork_files/figure-html/cell-10-output-1.png){width=656 height=470}\n:::\n:::\n\n\n<!--## How to evaluate unsupervised learning methods ->\n\n<!--TODO: XX Potentially NC160 data exercise can live here -->\n\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- PCA or tSNE are not magic bullets and may not _work_ all the time \n:::\n\n",
    "supporting": [
      "pca_tsne_notwork_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
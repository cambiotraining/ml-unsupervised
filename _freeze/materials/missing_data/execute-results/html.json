{
  "hash": "8f201b0747a7adf860b88eada8ac92dd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Missing values in unsupervised machine learning\n---\n\n::: {.callout-tip}\n#### Learning Objectives\n\n- Missing values in unsupervised machine learning problems.\n:::\n\n\n\n## Exercise with missing data {#sec-clustering-missing-data}\n\nReal-world data frequently has missing values. PCA and clustering techniques can struggle on missing data.\n\nIn this exercise, you will work in a group and apply hierarchical clustering, PCA and tSNE on data which has missing values.\n\nRun the code below. All the missing data will be available in the variable `missing_data`.\n\n::: {#402f0606 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\ndef create_synthetic_biological_data():\n    \"\"\"\n    Create synthetic gene expression data with biological structure and missingness.\n    \n    Returns:\n    - complete_data: Original data without missing values\n    - missing_data: Data with various missingness patterns\n    - true_labels: True cluster labels for evaluation\n    \"\"\"\n    #print(\"Creating synthetic biological dataset...\")\n    \n    # Parameters\n    n_samples = 100\n    n_genes = 50\n    n_clusters = 4\n    \n    # Create base data structure\n    data = np.random.normal(0, 1, (n_samples, n_genes))\n    \n    # Add biological structure (clusters)\n    cluster_size = n_samples // n_clusters\n    \n    # Cluster 1: High expression in genes 0-12, samples 0-24\n    data[0:25, 0:13] += 2.5\n    # Cluster 2: High expression in genes 13-25, samples 25-49  \n    data[25:50, 13:26] += 2.0\n    # Cluster 3: High expression in genes 26-37, samples 50-74\n    data[50:75, 26:38] += 1.8\n    # Cluster 4: Low expression in genes 38-49, samples 75-99\n    data[75:100, 38:50] -= 2.2\n    \n    # Add some noise\n    data += np.random.normal(0, 0.5, data.shape)\n    \n    # Create sample and gene names\n    sample_names = [f'Sample_{i:03d}' for i in range(n_samples)]\n    gene_names = [f'Gene_{chr(65+i//26)}{chr(65+i%26)}' for i in range(n_genes)]\n    \n    # Create DataFrame\n    complete_data = pd.DataFrame(data, index=sample_names, columns=gene_names)\n    \n    # Create true cluster labels\n    true_labels = np.repeat(range(n_clusters), cluster_size)\n    if len(true_labels) < n_samples:\n        true_labels = np.append(true_labels, [n_clusters-1] * (n_samples - len(true_labels)))\n    \n    #print(f\"Created dataset: {complete_data.shape[0]} samples Ã— {complete_data.shape[1]} genes\")\n    #print(f\"True clusters: {n_clusters}\")\n    \n    return complete_data, true_labels\n\ndef introduce_missing_data_patterns(complete_data, true_labels):\n    \"\"\"\n    Introduce different types of missing data patterns.\n    \n    Parameters:\n    - complete_data: Original complete dataset\n    - true_labels: True cluster labels\n    \n    Returns:\n    - missing_data: Dataset with missing values\n    - missing_info: Information about missingness patterns\n    \"\"\"\n    #print(\"\\nIntroducing missing data patterns...\")\n    \n    missing_data = complete_data.copy()\n    missing_info = {}\n    \n    # Pattern 1: Missing Completely At Random (MCAR) - 5% random missing\n    #print(\"1. Adding MCAR missingness (5% random)...\")\n    mcar_mask = np.random.random(missing_data.shape) < 0.05\n    missing_data[mcar_mask] = np.nan\n    missing_info['MCAR'] = mcar_mask.sum()\n    \n    # Pattern 2: Missing At Random (MAR) - correlated with expression level\n    #print(\"2. Adding MAR missingness (correlated with high expression)...\")\n    # Higher chance of missing for high expression values\n    high_expr_mask = missing_data > missing_data.quantile(0.8)\n    mar_probability = np.where(high_expr_mask, 0.15, 0.02)  # 15% for high, 2% for low\n    mar_mask = np.random.random(missing_data.shape) < mar_probability\n    missing_data[mar_mask] = np.nan\n    missing_info['MAR'] = mar_mask.sum()\n    \n    # Pattern 3: Missing Not At Random (MNAR) - systematic missing\n    #print(\"3. Adding MNAR missingness (systematic missing)...\")\n    # Missing entire samples (simulating failed experiments)\n    failed_samples = np.random.choice(missing_data.index, size=8, replace=False)\n    missing_data.loc[failed_samples, :] = np.nan\n    missing_info['MNAR_samples'] = len(failed_samples)\n    \n    # Missing entire genes (simulating detection failures)\n    failed_genes = np.random.choice(missing_data.columns, size=5, replace=False)\n    missing_data.loc[:, failed_genes] = np.nan\n    missing_info['MNAR_genes'] = len(failed_genes)\n    \n    # Pattern 4: Block missingness (simulating batch effects)\n    #print(\"4. Adding block missingness (batch effects)...\")\n    # Missing blocks of data (simulating different experimental conditions)\n    block_start_row = 20\n    block_end_row = 35\n    block_start_col = 10\n    block_end_col = 20\n    missing_data.iloc[block_start_row:block_end_row, block_start_col:block_end_col] = np.nan\n    missing_info['Block'] = (block_end_row - block_start_row) * (block_end_col - block_start_col)\n    \n    # Calculate total missingness\n    total_missing = missing_data.isnull().sum().sum()\n    total_values = missing_data.size\n    missing_percentage = (total_missing / total_values) * 100\n    \n    print(f\"\\nMissing data summary:\")\n    print(f\"Total missing values: {total_missing}\")\n    print(f\"Missing percentage: {missing_percentage:.1f}%\")\n    #print(f\"MCAR: {missing_info['MCAR']} values\")\n    #print(f\"MAR: {missing_info['MAR']} values\") \n    #print(f\"MNAR samples: {missing_info['MNAR_samples']} samples\")\n    #print(f\"MNAR genes: {missing_info['MNAR_genes']} genes\")\n    #print(f\"Block missing: {missing_info['Block']} values\")\n    \n    return missing_data, missing_info\n\ndef visualize_missing_patterns(complete_data, missing_data, true_labels):\n    \"\"\"\n    Visualize the missing data patterns.\n    \"\"\"\n    print(\"\\nCreating missing data visualizations...\")\n    \n    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n    \n    # Plot 1: Complete data heatmap\n    plt.subplot(2, 2, 1)\n    sns.heatmap(complete_data.iloc[:50, :30], cmap='RdBu_r', center=0, \n                cbar_kws={'label': 'Expression Level'})\n    plt.title('Complete Data (First 50 samples, 30 genes)')\n    plt.xlabel('Genes')\n    plt.ylabel('Samples')\n    \n    # Plot 2: Missing data pattern\n    plt.subplot(2, 2, 2)\n    missing_mask = missing_data.iloc[:50, :30].isnull()\n    sns.heatmap(missing_mask, cmap='Reds', cbar_kws={'label': 'Missing (1=Yes, 0=No)'})\n    plt.title('Missing Data Pattern')\n    plt.xlabel('Genes')\n    plt.ylabel('Samples')\n    \n    # Plot 3: Missing data by sample\n    plt.subplot(2, 2, 3)\n    missing_by_sample = missing_data.isnull().sum(axis=1)\n    plt.bar(range(len(missing_by_sample)), missing_by_sample)\n    plt.title('Missing Values per Sample')\n    plt.xlabel('Sample Index')\n    plt.ylabel('Number of Missing Values')\n    \n    # Plot 4: Missing data by gene\n    plt.subplot(2, 2, 4)\n    missing_by_gene = missing_data.isnull().sum(axis=0)\n    plt.bar(range(len(missing_by_gene)), missing_by_gene)\n    plt.title('Missing Values per Gene')\n    plt.xlabel('Gene Index')\n    plt.ylabel('Number of Missing Values')\n    \n    plt.tight_layout()\n    plt.show()\n\n\n# Create synthetic data\ncomplete_data, true_labels = create_synthetic_biological_data()\n    \n# Introduce missing data patterns\nmissing_data, missing_info = introduce_missing_data_patterns(complete_data, true_labels)\n    \n# Visualize missing patterns\n#visualize_missing_patterns(complete_data, missing_data, true_labels)\n\n# All the missing data is available in the variable missing_data\n# fill in your code here ...\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nMissing data summary:\nTotal missing values: 1346\nMissing percentage: 26.9%\n```\n:::\n:::\n\n\n* All the missing data is available in the variable `missing_data`. \n\n* Now perform hierarchical clustering, PCA and tSNE on this data.\n\n* How would you _impute_ (infer) missing values? i.e. figure out what the values may have been and fill them in. \n\n<!--\nSolutions: in scripts/missing_data_solutions.py \n-->\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- Missing data comes up a lot in data science problem.\n- Many machine learning techniques struggle on missing data.\n- You can use various techniques to _impute_ missing values.\n:::\n\n",
    "supporting": [
      "missing_data_files"
    ],
    "filters": [],
    "includes": {}
  }
}